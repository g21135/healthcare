#appender : 로깅을 남길 장소
#layout : 로깅 패턴(형식)
# log4j.properties

# 클래스 패스 
 
 
 
 #파일명은 반드시 log4j
 
# 기본 로깅등급은 INFO , 기본 appender로 표준출력과 rolling 을 사용함.
log4j.rootLogger = DEBUG, stdout, rolling
#FATAL > ERROR > WRN > INFO > DEBUG
#,rolling추가하면 log4j.appender.rolling.File=d:/D_Other/wchart.log 파일이 생성됨

#------------------------------콘솔용 appender---------------------------------


# Appender 종류(ConsoleAppender, FileAppender, JDBCAppender, JMSAppender, SMTPAppender, SocketAppender, SyslogAppender 등)
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#stdout appender는 콘솔에 뿌리겠다는 정의
# The target may be a console, a file, or another item depending on the appender.

log4j.appender.stdout.Target=System.out
# Layout 종류(DateLayout, HTMLLayout, PatternLayout, SimpleLayout, XMLLayout)

log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#patternlayout을 사용하겠다는 정의

# 로깅등급 클래스명.메소드명:라인수 - 메시지
log4j.appender.stdout.layout.ConversionPattern=%5p %C{1}.%M:%L - %m%n  
#페턴은 다음과 같이 포맷팅 하겠다는 것을 정의


#------------------------------파일용 appender---------------------------------

# 로그출력을 여러개의 파일로 나누어 처리하기
log4j.appender.rolling=org.apache.log4j.DailyRollingFileAppender
#rolling appender는 파일로 처리한다라고 정의

log4j.appender.rolling.File=c:/log/wchart.log
#로그 파일 이름은 wchart.log

log4j.appender.rolling.DatePattern='.'yyyy-MM-dd
#파일 포맷은 output.log.2005-03-10 으로 관리하겠다고 정의

log4j.appender.rolling.layout=org.apache.log4j.PatternLayout
#rolling appender는 패턴 레이아웃을 사용하겠다고 정의

log4j.appender.rolling.layout.ConversionPattern=[%d] %-5p %l - %m%n
#패턴 레이아웃 포맷

log4j.appender.rolling.Append=true
#true면 톰캣을 내렸다 올려도 파일이 리셋되지 않습니다.

#출력용 appender 

# Set the immediate flush to true (default)
#log4j.appender.rolling.ImmediateFlush=true
# Set the threshold level(임계값) to debug mode
#log4j.appender.rolling.Threshold=debug

# Set the maximum file size before rollover
#log4j.appender.FILE.MaxFileSize=5KB

# Set the the backup index
#log4j.appender.FILE.MaxBackupIndex=2

# SqlMap logging configuration...



#------------------------------패키지 자체에 로깅을 걸고 싶을때------------------------------

#log4j.logger.[logger-name]=level, appender1,appender..n
#log4j.logger.java.sql.Connection=DEBUG, rolling
#log4j.logger.java.sql.Statement=DEBUG, rolling                       
#log4j.logger.java.sql.PreparedStatement=INFO, rolling
#log4j.logger.java.sql.ResultSet=DEBUG, rolling

#Logger Test

#log4j.logger.kr.or.ddit.main.MemberInforMng=DEBUG 
#직접 로그레벨 설정이 가능하다

